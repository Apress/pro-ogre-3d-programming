#define yy_create_buffer ts10__create_buffer
#define yy_delete_buffer ts10__delete_buffer
#define yy_scan_buffer ts10__scan_buffer
#define yy_scan_string ts10__scan_string
#define yy_scan_bytes ts10__scan_bytes
#define yy_flex_debug ts10__flex_debug
#define yy_init_buffer ts10__init_buffer
#define yy_flush_buffer ts10__flush_buffer
#define yy_load_buffer_state ts10__load_buffer_state
#define yy_switch_to_buffer ts10__switch_to_buffer
#define yyin ts10_in
#define yyleng ts10_leng
#define yylex ts10_lex
#define yyout ts10_out
#define yyrestart ts10_restart
#define yytext ts10_text
#define yywrap ts10_wrap

#line 20 "_ts1.0_lexer.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvsroot/ogre/ogrenew/RenderSystems/GL/src/nvparse/_ts1.0_lexer.cpp,v 1.5 2005/07/08 16:51:23 miathan6 Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 59
#define YY_END_OF_BUFFER 60
static yyconst short int yy_accept[404] =
    {   0,
        0,    0,   60,   59,   57,   56,   59,   59,    3,    4,
        5,   59,    7,   59,   59,   55,    6,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   57,   56,    0,
        0,    0,   55,   54,    1,    2,   53,   55,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,    0,
       53,   58,   58,   58,   58,   58,   58,   15,   58,   58,
       58,    0,   58,   58,   58,   58,   58,   58,   58,   58,
        9,   10,   11,   58,    0,   58,   58,   58,   58,   58,
       58,   58,   58,   58,    0,   58,   58,   58,   58,   58,
       12,   58,   58,   58,    8,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   24,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   16,   17,   19,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   27,   28,   58,   58,   58,   22,   58,   58,
       58,   58,   21,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   13,   14,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   23,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   26,   20,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   18,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   29,   30,   35,   36,
       37,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   25,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       38,   39,   40,   58,   58,   58,   58,   58,   58,   58,
       31,   32,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   33,   34,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   44,   45,   46,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   41,
       42,   43,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       50,   51,   52,   58,   58,   58,   58,   58,   58,   47,

       48,   49,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    1,    1,    1,    7,
        8,    9,   10,   11,   10,   12,   13,   14,   15,   16,
       17,   18,   18,   18,   18,   18,   18,    1,   19,    1,
        1,    1,    1,    1,   20,   21,   21,   21,   22,   21,
       23,   24,   21,   21,   21,   25,   21,   26,   27,   21,
       28,   29,   30,   31,   32,   21,   21,   21,   21,   33,
        1,    1,    1,    1,   34,    1,   35,   36,   37,   38,

       39,   40,   41,   42,   21,   21,   21,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   21,   21,   53,
       54,   21,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[55] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    2,    2,    2,    2,    2,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2
    } ;

static yyconst short int yy_base[405] =
    {   0,
        0,    0,  844,  845,  841,  845,   52,  837,  845,  845,
      845,   45,  845,   50,   60,   60,  845,  829,   58,   59,
       46,   67,   70,   71,   72,   73,   75,  838,  845,   85,
      808,   76,   85,  104,  845,  845,  110,  117,  826,   83,
       74,   93,   95,   97,   98,  103,  104,  118,   84,  807,
      137,  126,  127,  128,  131,  129,  134,  824,  135,  137,
      150,  820,  147,  144,  148,  149,  160,  161,  163,  162,
      822,  821,  820,  164,  819,  165,  167,  168,  171,  169,
      172,  174,  176,  177,  816,  179,  180,  181,  183,  185,
      817,  187,  191,  193,  845,  188,  200,  199,  202,  203,

      212,  205,  211,  217,  223,  224,  225,  226,  228,  230,
      227,  240,  234,  236,  231,  238,  246,  247,  248,  239,
      241,  250,  252,  251,  255,  259,  262,  268,  270,  272,
      274,  275,  281,  816,  815,  814,  284,  288,  286,  287,
      285,  289,  292,  298,  290,  294,  300,  301,  302,  304,
      305,  303,  813,  812,  319,  306,  307,  811,  309,  325,
      332,  334,  810,  327,  333,  335,  336,  337,  338,  339,
      346,  343,  809,  808,  350,  351,  355,  352,  357,  354,
      358,  360,  361,  362,  388,  367,  370,  371,  374,  807,
      377,  380,  386,  384,  395,  396,  397,  398,  399,  403,

      400,  401,  402,  806,  407,  408,  411,  412,  413,  414,
      406,  422,  416,  420,  419,  805,  443,  446,  448,  451,
      454,  435,  425,  426,  427,  452,  804,  803,  802,  801,
      800,  437,  460,  461,  463,  465,  464,  467,  468,  469,
      470,  475,  473,  471,  474,  476,  481,  482,  483,  489,
      484,  496,  497,  799,  490,  491,  505,  506,  509,  508,
      510,  511,  520,  523,  524,  513,  512,  526,  527,  530,
      798,  797,  796,  531,  536,  537,  543,  540,  546,  545,
      795,  793,  551,  550,  553,  556,  557,  560,  561,  565,
      559,  567,  562,  571,  570,  563,  791,  790,  564,  569,

      576,  577,  579,  580,  582,  583,  584,  585,  586,  596,
      599,  600,  601,  603,  604,  607,  608,  612,  613,  616,
      617,  619,  618,  622,  623,  628,  626,  627,  629,  641,
      642,  645,  647,  649,  652,  653,  656,  657,  665,  666,
      668,  654,  655,  672,  674,  648,  789,  788,  787,  679,
      683,  685,  686,  678,  687,  691,  693,  694,  695,  786,
      785,  784,  697,  699,  700,  701,  702,  703,  704,  709,
      712,  718,  720,  714,  721,  710,  715,  723,  728,  730,
      716,  731,  733,  751,  753,  760,  763,  735,  743,  745,
      783,  782,  781,  747,  764,  766,  767,  771,  773,  780,

      774,  770,  845,  744
    } ;

static yyconst short int yy_def[405] =
    {   0,
      403,    1,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  404,  403,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  403,
      403,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  403,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  403,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  403,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  403,  404,  404,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,

      404,  404,    0,  403
    } ;

static yyconst short int yy_nxt[900] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,    4,   12,
       13,   14,   15,   16,   16,   16,   16,   16,   17,   18,
       18,   18,   19,   18,   20,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   21,   22,   23,   18,
       18,   18,   18,   18,   24,   25,   26,   18,   18,   18,
       27,   18,   18,   18,   29,   30,   32,  403,   33,   33,
       33,   33,   33,   34,   34,   34,   34,   34,   35,  403,
      403,   37,   36,   38,   38,   38,   38,   38,  403,   40,
       41,  403,  403,  403,  403,  403,  403,   29,   30,   34,
       34,   34,   34,   34,  403,  403,   37,   42,   33,   33,

       33,   33,   33,   53,  403,   43,  403,   48,  403,  403,
       52,   47,   44,   49,  403,  403,   46,   34,   34,   34,
       34,   34,   45,   51,   51,   51,   51,   51,   37,  403,
       38,   38,   38,   38,   38,   54,   61,  403,  403,  403,
      403,   55,  403,   59,   57,  403,  403,   56,  403,   58,
       51,   51,   51,   51,   51,  403,   64,   63,  403,  403,
      403,  403,   67,   71,   72,   73,   76,   60,   68,   66,
       65,  403,  403,  403,  403,  403,  403,   77,  403,  403,
      403,   78,  403,  403,   69,  403,   70,  403,  403,   86,
      403,  403,  403,   79,  403,   83,  403,   87,  403,  403,

       74,   82,  403,   97,  403,   81,   80,   88,   89,   91,
      403,  403,   96,  403,  403,   84,  403,   90,  104,  105,
      101,   99,  403,  403,   92,   94,   93,  109,  403,   98,
      100,  103,  102,  106,  403,  403,  403,  403,  403,  403,
      108,  403,  403,  113,  112,  403,  107,  403,  114,  403,
      403,  403,  403,  111,  121,  122,  123,  403,  403,  403,
      110,  403,  403,  403,  115,  118,  403,  126,  119,  127,
      403,  129,  120,  403,  128,  116,  124,  117,  134,  403,
      131,  403,  130,  403,  132,  403,  403,  135,  125,  136,
      133,  139,  403,  138,  140,  403,  403,  403,  403,  403,

      403,  403,  137,  403,  142,  403,  141,  150,  151,  403,
      143,  403,  403,  403,  403,  403,  403,  403,  403,  148,
      403,  147,  144,  145,  149,  146,  156,  154,  157,  152,
      403,  155,  161,  162,  164,  165,  403,  153,  403,  159,
      169,  158,  171,  403,  403,  403,  403,  403,  403,  403,
      403,  170,  160,  163,  403,  166,  167,  403,  173,  172,
      174,  403,  403,  403,  175,  403,  403,  168,  403,  403,
      176,  403,  403,  403,  178,  179,  194,  195,  403,  181,
      180,  403,  403,  184,  185,  403,  177,  183,  403,  182,
      186,  403,  190,  188,  192,  403,  189,  403,  187,  403,

      191,  193,  196,  197,  198,  199,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  203,  202,  403,  403,  403,
      200,  201,  403,  403,  403,  403,  204,  403,  205,  206,
      403,  403,  211,  403,  213,  215,  403,  403,  403,  214,
      207,  208,  209,  210,  212,  216,  403,  217,  403,  222,
      218,  219,  220,  221,  403,  223,  225,  403,  227,  403,
      224,  228,  403,  403,  229,  403,  234,  230,  226,  232,
      231,  403,  403,  233,  403,  403,  403,  235,  403,  403,
      403,  403,  403,  237,  403,  403,  403,  403,  236,  247,
      248,  249,  403,  403,  403,  403,  240,  242,  238,  241,

      403,  403,  403,  239,  252,  245,  244,  403,  403,  250,
      260,  261,  246,  243,  254,  251,  403,  403,  259,  403,
      403,  403,  403,  403,  403,  253,  255,  256,  257,  263,
      264,  403,  262,  258,  403,  403,  271,  403,  403,  272,
      273,  403,  403,  266,  265,  267,  274,  403,  403,  270,
      275,  403,  281,  268,  403,  269,  403,  403,  282,  285,
      286,  403,  403,  278,  403,  276,  277,  403,  403,  280,
      403,  403,  403,  403,  403,  403,  403,  297,  403,  279,
      403,  403,  403,  283,  284,  287,  298,  403,  403,  288,
      403,  403,  295,  403,  403,  403,  403,  403,  289,  301,

      293,  290,  292,  291,  294,  296,  299,  403,  300,  302,
      403,  403,  403,  307,  403,  403,  309,  306,  403,  403,
      310,  305,  303,  403,  403,  312,  304,  403,  403,  403,
      403,  308,  314,  403,  403,  311,  316,  403,  403,  403,
      403,  317,  329,  330,  331,  319,  322,  313,  315,  318,
      324,  326,  403,  403,  323,  321,  403,  328,  403,  403,
      403,  320,  325,  403,  403,  403,  403,  403,  403,  327,
      342,  343,  344,  333,  334,  332,  403,  403,  337,  403,
      338,  347,  348,  403,  349,  403,  335,  336,  339,  403,
      403,  340,  341,  345,  403,  346,  403,  403,  403,  350,

      351,  354,  403,  360,  403,  403,  403,  361,  403,  362,
      403,  403,  403,  403,  403,  403,  359,  352,  355,  353,
      403,  403,  356,  403,  357,  403,  403,  403,  364,  403,
      358,  403,  403,  367,  403,  377,  378,  379,  366,  403,
      369,  403,  403,  363,  403,   39,  403,  365,  370,  368,
      373,  374,  372,  375,  403,  385,  403,  371,  403,  380,
      381,  376,  403,  384,  403,  388,  389,  390,  382,  391,
      386,  403,  387,  383,  403,  403,  392,  403,  403,  393,
      394,  403,  403,  400,  403,  403,  397,  401,  395,  402,
      396,  403,  403,  403,  403,  403,  403,  403,  403,  403,

      403,  403,  403,  398,  403,  399,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,   95,
       85,  403,  403,  403,   75,  403,   62,  403,   50,   28,
      403,   31,   28,  403,    3,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403

    } ;

static yyconst short int yy_chk[900] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    7,    7,   12,   21,   12,   12,
       12,   12,   12,   14,   14,   14,   14,   14,   15,   19,
       20,   16,   15,   16,   16,   16,   16,   16,   22,   19,
       20,   23,   24,   25,   26,   41,   27,   30,   30,   32,
       32,   32,   32,   32,   40,   49,   33,   21,   33,   33,

       33,   33,   33,   41,   42,   22,   43,   26,   44,   45,
       40,   25,   22,   27,   46,   47,   24,   34,   34,   34,
       34,   34,   23,   37,   37,   37,   37,   37,   38,   48,
       38,   38,   38,   38,   38,   42,   49,   52,   53,   54,
       56,   43,   55,   47,   45,   57,   59,   44,   60,   46,
       51,   51,   51,   51,   51,   64,   53,   52,   63,   65,
       66,   61,   56,   61,   61,   61,   63,   48,   57,   55,
       54,   67,   68,   70,   69,   74,   76,   64,   77,   78,
       80,   65,   79,   81,   59,   82,   60,   83,   84,   76,
       86,   87,   88,   66,   89,   70,   90,   77,   92,   96,

       61,   69,   93,   87,   94,   68,   67,   78,   79,   81,
       98,   97,   86,   99,  100,   74,  102,   80,   96,   97,
       92,   89,  103,  101,   82,   84,   83,  101,  104,   88,
       90,   94,   93,   98,  105,  106,  107,  108,  111,  109,
      100,  110,  115,  104,  103,  113,   99,  114,  105,  116,
      120,  112,  121,  102,  112,  112,  112,  117,  118,  119,
      101,  122,  124,  123,  106,  109,  125,  113,  110,  114,
      126,  116,  111,  127,  115,  107,  112,  108,  121,  128,
      118,  129,  117,  130,  119,  131,  132,  122,  112,  123,
      120,  126,  133,  125,  127,  137,  141,  139,  140,  138,

      142,  145,  124,  143,  129,  146,  128,  139,  140,  144,
      129,  147,  148,  149,  152,  150,  151,  156,  157,  137,
      159,  133,  130,  131,  138,  132,  145,  143,  146,  141,
      155,  144,  150,  151,  155,  155,  160,  142,  164,  148,
      156,  147,  159,  161,  165,  162,  166,  167,  168,  169,
      170,  157,  149,  152,  172,  155,  155,  171,  161,  160,
      162,  175,  176,  178,  164,  180,  177,  155,  179,  181,
      165,  182,  183,  184,  167,  168,  184,  184,  186,  170,
      169,  187,  188,  175,  176,  189,  166,  172,  191,  171,
      177,  192,  180,  179,  182,  194,  179,  193,  178,  185,

      181,  183,  185,  185,  185,  186,  195,  196,  197,  198,
      199,  201,  202,  203,  200,  191,  189,  211,  205,  206,
      187,  188,  207,  208,  209,  210,  192,  213,  193,  194,
      215,  214,  199,  212,  201,  203,  223,  224,  225,  202,
      195,  196,  197,  198,  200,  205,  222,  206,  232,  211,
      207,  208,  209,  210,  217,  212,  214,  218,  217,  219,
      213,  218,  220,  226,  219,  221,  224,  220,  215,  222,
      221,  233,  234,  223,  235,  237,  236,  225,  238,  239,
      240,  241,  244,  232,  243,  245,  242,  246,  226,  242,
      242,  242,  247,  248,  249,  251,  235,  237,  233,  236,

      250,  255,  256,  234,  244,  240,  239,  252,  253,  242,
      252,  252,  241,  238,  246,  243,  257,  258,  251,  260,
      259,  261,  262,  267,  266,  245,  247,  248,  249,  255,
      256,  263,  253,  250,  264,  265,  263,  268,  269,  264,
      265,  270,  274,  258,  257,  259,  266,  275,  276,  262,
      267,  278,  276,  260,  277,  261,  280,  279,  277,  280,
      280,  284,  283,  270,  285,  268,  269,  286,  287,  275,
      291,  288,  289,  293,  296,  299,  290,  293,  292,  274,
      300,  295,  294,  278,  279,  283,  294,  301,  302,  284,
      303,  304,  291,  305,  306,  307,  308,  309,  285,  296,

      289,  286,  288,  287,  290,  292,  295,  310,  295,  299,
      311,  312,  313,  304,  314,  315,  306,  303,  316,  317,
      307,  302,  300,  318,  319,  309,  301,  320,  321,  323,
      322,  305,  311,  324,  325,  308,  313,  327,  328,  326,
      329,  314,  326,  326,  326,  316,  319,  310,  312,  315,
      321,  323,  330,  331,  320,  318,  332,  325,  333,  346,
      334,  317,  322,  335,  336,  342,  343,  337,  338,  324,
      337,  337,  337,  328,  329,  327,  339,  340,  332,  341,
      333,  339,  340,  344,  341,  345,  330,  331,  334,  354,
      350,  335,  336,  338,  351,  338,  352,  353,  355,  342,

      343,  346,  356,  355,  357,  358,  359,  356,  363,  357,
      364,  365,  366,  367,  368,  369,  354,  344,  350,  345,
      370,  376,  351,  371,  352,  374,  377,  381,  359,  372,
      353,  373,  375,  365,  378,  375,  375,  375,  364,  379,
      367,  380,  382,  358,  383,  404,  388,  363,  368,  366,
      371,  372,  370,  373,  389,  381,  390,  369,  394,  376,
      377,  374,  384,  380,  385,  384,  384,  384,  378,  385,
      382,  386,  383,  379,  387,  395,  386,  396,  397,  387,
      388,  402,  398,  397,  399,  401,  394,  398,  389,  399,
      390,  400,  393,  392,  391,  362,  361,  360,  349,  348,

      347,  298,  297,  395,  282,  396,  281,  273,  272,  271,
      254,  231,  230,  229,  228,  227,  216,  204,  190,  174,
      173,  163,  158,  154,  153,  136,  135,  134,   91,   85,
       75,   73,   72,   71,   62,   58,   50,   39,   31,   28,
       18,    8,    5,    3,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "ts1.0_tokens.l"
#define INITIAL 0
/* definitions */
#line 7 "ts1.0_tokens.l"
#include <stdlib.h>
#include "ts1.0_inst.h"
#include "ts1.0_inst_list.h"
#include "_ts1.0_parser.h"
#ifdef _WIN32
# include <windows.h>
#endif
#include <GL/glew.h>
#include "nvparse_errors.h"
#include "nvparse_externs.h"


#define YY_INPUT(buf,result,max_size) \
{ \
	int c = *myin++; \
	result = (c == 0) ? YY_NULL : (buf[0] = c, 1); \
}

#define YY_ALWAYS_INTERACTIVE 1

/* end of definitions */
#line 738 "_ts1.0_lexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 29 "ts1.0_tokens.l"


#line 892 "_ts1.0_lexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 404 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 845 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 31 "ts1.0_tokens.l"
{
			    A:
				switch (yyinput()) {
				  case '*': goto B;
				  case 0: errors.set("end-of-file in comment", line_number); break;
				  case '\n': line_number++;
				  default:  goto A;
				}
			    B:
				switch (yyinput()) {
				  case '*': goto B;
				  case '/': break;
				  case 0: errors.set("end-of-file in comment", line_number); break;
				  case '\n': line_number++;
				  default:  goto A;
				}
			}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 49 "ts1.0_tokens.l"
{
			    char ch;
			    while ((ch = yyinput()) != '\n');
			    if (ch == '\n') line_number++;
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "ts1.0_tokens.l"
{
			    char ch;
			    while ((ch = yyinput()) != '\n');
			    if (ch == '\n') line_number++;
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 61 "ts1.0_tokens.l"
return(openParen);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "ts1.0_tokens.l"
return(closeParen);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "ts1.0_tokens.l"
return(semicolon);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "ts1.0_tokens.l"
return(comma);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 66 "ts1.0_tokens.l"
{ /* eat header */ }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "ts1.0_tokens.l"
{
			    ts10_lval.fval = (float)0;
			    return(texVariable);
			}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 73 "ts1.0_tokens.l"
{
			    ts10_lval.fval = (float)1;
			    return(texVariable);
			}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 78 "ts1.0_tokens.l"
{
			    ts10_lval.fval = (float)2;
			    return(texVariable);
			}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 83 "ts1.0_tokens.l"
return(expandString);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 85 "ts1.0_tokens.l"
{
				ts10_lval.fval = (float)GL_GEQUAL;
				return (gequal);
			}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 90 "ts1.0_tokens.l"
{
				ts10_lval.fval = (float)GL_LESS;
				return(less);
			}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 95 "ts1.0_tokens.l"
return(nop);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 96 "ts1.0_tokens.l"
return(texture_1d);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 97 "ts1.0_tokens.l"
return(texture_2d);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 98 "ts1.0_tokens.l"
return(texture_rectangle);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 99 "ts1.0_tokens.l"
return(texture_3d);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 100 "ts1.0_tokens.l"
return(texture_cube_map);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 101 "ts1.0_tokens.l"
return(cull_fragment);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 102 "ts1.0_tokens.l"
return(pass_through);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 103 "ts1.0_tokens.l"
return(offset_2d_scale);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 104 "ts1.0_tokens.l"
return(offset_2d);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 105 "ts1.0_tokens.l"
return(offset_rectangle_scale);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 106 "ts1.0_tokens.l"
return(offset_rectangle);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 107 "ts1.0_tokens.l"
return(dependent_ar);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 108 "ts1.0_tokens.l"
return(dependent_gb);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 110 "ts1.0_tokens.l"
return(dot_product_2d_1of2);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 111 "ts1.0_tokens.l"
return(dot_product_2d_2of2);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 113 "ts1.0_tokens.l"
return(dot_product_rectangle_1of2);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 114 "ts1.0_tokens.l"
return(dot_product_rectangle_2of2);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 116 "ts1.0_tokens.l"
return(dot_product_depth_replace_1of2);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 117 "ts1.0_tokens.l"
return(dot_product_depth_replace_2of2);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 119 "ts1.0_tokens.l"
return(dot_product_3d_1of3);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 120 "ts1.0_tokens.l"
return(dot_product_3d_2of3);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 121 "ts1.0_tokens.l"
return(dot_product_3d_3of3);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 123 "ts1.0_tokens.l"
return(dot_product_cube_map_1of3);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 124 "ts1.0_tokens.l"
return(dot_product_cube_map_2of3);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 125 "ts1.0_tokens.l"
return(dot_product_cube_map_3of3);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 127 "ts1.0_tokens.l"
return(dot_product_reflect_cube_map_eye_from_qs_1of3);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 128 "ts1.0_tokens.l"
return(dot_product_reflect_cube_map_eye_from_qs_2of3);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 129 "ts1.0_tokens.l"
return(dot_product_reflect_cube_map_eye_from_qs_3of3);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 131 "ts1.0_tokens.l"
return(dot_product_reflect_cube_map_const_eye_1of3);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 132 "ts1.0_tokens.l"
return(dot_product_reflect_cube_map_const_eye_2of3);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 133 "ts1.0_tokens.l"
return(dot_product_reflect_cube_map_const_eye_3of3);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 135 "ts1.0_tokens.l"
return(dot_product_cube_map_and_reflect_cube_map_eye_from_qs_1of3);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 136 "ts1.0_tokens.l"
return(dot_product_cube_map_and_reflect_cube_map_eye_from_qs_2of3);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 137 "ts1.0_tokens.l"
return(dot_product_cube_map_and_reflect_cube_map_eye_from_qs_3of3);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 139 "ts1.0_tokens.l"
return(dot_product_cube_map_and_reflect_cube_map_const_eye_1of3);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 140 "ts1.0_tokens.l"
return(dot_product_cube_map_and_reflect_cube_map_const_eye_2of3);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 141 "ts1.0_tokens.l"
return(dot_product_cube_map_and_reflect_cube_map_const_eye_3of3);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 143 "ts1.0_tokens.l"
{
				ts10_lval.fval = (float)atof(yytext);
				return(floatValue);
			}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 148 "ts1.0_tokens.l"
{
				ts10_lval.fval = (float)atof(yytext);
				return(floatValue);
			}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 153 "ts1.0_tokens.l"
{
				ts10_lval.fval = (float)atof(yytext);
				return(floatValue);
			}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 158 "ts1.0_tokens.l"
{
				line_number++;
			}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 162 "ts1.0_tokens.l"
{}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 164 "ts1.0_tokens.l"
{
				errors.set("unrecognized token", line_number);
			}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 169 "ts1.0_tokens.l"
ECHO;
	YY_BREAK
#line 1322 "_ts1.0_lexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 404 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 404 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 403);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 169 "ts1.0_tokens.l"


bool ts10_init_more();

bool ts10_init(char* inputString)
{
    myin = inputString;
	return ts10_init_more();
}


#ifndef ts10_wrap
int ts10_wrap(void)
{
  return(1);
}
#endif
